<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestFlask.Models.Entity" #>
/****************************************************************************
*																		 	*
*	This class is auto generated by TestFlask CLI on <#=DateTime.Now.ToString()#>	    *
*	https://github.com/FatihSahin/test-flask                                *
*	Implement provider methods and step assertions inside another file.		*
*																		 	*
****************************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using TestFlask.Aspects.ApiClient;
using TestFlask.Aspects.Enums;
using TestFlask.Models.Context;
using TestFlask.Models.Entity;

namespace <#=options.Namespace #>
{
	public partial class TestFlaskTests
	{
		#region ConventionalAutos

		JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
		{
			TypeNameHandling = TypeNameHandling.All,
			TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple
		};

		private void ProvideTestFlaskHttpContext(Invocation invocation)
		{
			HttpContext.Current = new HttpContext(
				new HttpRequest("", "http://tempuri.org", ""),
				new HttpResponse(new StringWriter())
				);

			// In order to by pass Platform not supported exception
			// http://bigjimindc.blogspot.com.tr/2007/07/ms-kb928365-aspnet-requestheadersadd.html
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ProjectKey, invocation.ProjectKey);
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ScenarioNo, invocation.ScenarioNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.StepNo, invocation.StepNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.TestMode, TestModes.Assert.ToString());
		}

		private void AddHeaderToRequest(HttpRequest request, string key, string value)
		{
			NameValueCollection headers = request.Headers;

			Type t = headers.GetType();
			ArrayList item = new ArrayList();

			// Remove read-only limitation on headers
			t.InvokeMember("MakeReadWrite", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			t.InvokeMember("InvalidateCachedArrays", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			item.Add(value);
			t.InvokeMember("BaseAdd", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, new object[] { key, item });
			t.InvokeMember("MakeReadOnly", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
		}

		private Invocation GetRootInvocationFromApi(long stepNo)
		{
			TestFlaskApi api = new TestFlaskApi();
			Step step = api.LoadStep(stepNo);
			return step.Invocations.SingleOrDefault(inv => inv.Depth == 1);
		}

		private void HandleAssertion(Invocation rootInvocation, object responseObject, Exception exception, Action stepAssertion)
		{
			if ((!rootInvocation.IsFaulted && exception == null) || (rootInvocation.IsFaulted && exception != null))
			{
				stepAssertion();
			}
			else if (exception != null)
			{
				string exceptionStr = JsonConvert.SerializeObject(exception, jsonSerializerSettings);
				Assert.Fail($"Expected proper response of type {rootInvocation.ResponseType} but got exception =>{Environment.NewLine}{exceptionStr}");
			}
			else
			{
				string responseStr = JsonConvert.SerializeObject(responseObject, jsonSerializerSettings);
				Assert.Fail($"Expected exception of type {rootInvocation.ExceptionType} but got response =>{Environment.NewLine}{responseStr}");
			}
		}

		#endregion

		#region Scenarios
		
<#
foreach (Scenario scenario in Scenarios) {
	Scenario deepScenario = GetScenarioDeep(scenario.ScenarioNo);
#>
		[TestMethod]
		[TestCategory("TestFlask")]
		public void <#= GetScenarioTestMethodName(deepScenario)#>() {
<#
	foreach (Step step in deepScenario.Steps) {
#>
			<#= GetStepAssertMethodName(deepScenario, step)#>();
<#
	}
#>
		} 

<#
	foreach (Step step in deepScenario.Steps) {
		var rootInvocation = step.Invocations.Single(i=> i.Depth == 1);
		signatureMatch = signatureRegex.Match(rootInvocation.InvocationSignature);
#>
		private void <#= GetStepAssertMethodName(deepScenario, step)#>() {
			
			long stepNo = <#=step.StepNo #>;
			Invocation rootInvocation = GetRootInvocationFromApi(stepNo);

			ProvideTestFlaskHttpContext(rootInvocation);
			ProvideOperationContext(rootInvocation);

			var requestObject = JsonConvert.DeserializeObject<object[]>(rootInvocation.Request, jsonSerializerSettings).First()
				as <#=GetRequestTypeName()#>;

			<#=GetResponseTypeName()#> responseObject = null;
			Exception exception = null;
			
			try
			{
				responseObject = subject<#= GetSubjectValue(step)#>.<#= GetRootMethodName() #>(requestObject);
			}
			catch (Exception ex)
			{
				exception = ex;
			}

			HandleAssertion(rootInvocation, responseObject, exception, () => Assert<#= GetStepAssertMethodName(deepScenario, step)#>(responseObject, exception));
		}

<#
	}
#>
<# 
} 

	foreach (var subject in Subjects) { #>
		private <#= subject.Key #> subject<#= subject.Value #>;	
<#
	}
#>

		#endregion

	}
}
