<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestFlask.Models.Entity" #>
<#@ import namespace="TestFlask.CLI.Options" #>
/****************************************************************************
*																		 	*
*	This class is auto generated by TestFlask CLI on <#=DateTime.Now.ToString()#>	    *
*	https://github.com/FatihSahin/test-flask                                *
*	Implement provider methods and step assertions inside another file.		*
*																		 	*
****************************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization.Formatters;
using System.Text;
using System.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using TestFlask.Aspects.ApiClient;
using TestFlask.Aspects.Enums;
using TestFlask.Models.Context;
using TestFlask.Models.Entity;
using TestFlask.Aspects.Context;

namespace <#=options.Namespace #>
{
    [TestClass]
	public partial class <#=options.ClassName#>
	{
		#region Conventional

		private static IEnumerable<Scenario> embeddedScenarios { get; set; }

		private JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
		{
			TypeNameHandling = TypeNameHandling.All,
			TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple
		};

		[ClassInitialize]
		public static void ClassSetUp(TestContext context)
		{ 
			embeddedScenarios = ReadEmbeddedScenarios();
			DoClassSetUp(context);
		}
		
		[ClassCleanup]
		public static void ClassTearDown() {
			embeddedScenarios = null;
			DoClassTearDown();
		}

		private static IEnumerable<Scenario> ReadEmbeddedScenarios()
		{
			string fileName = "<#= GetEmbedFileName() #>";

			if (!File.Exists(fileName))
			{
				return null;
			}

			List<Scenario> embeddedScenarios = new List<Scenario>();

			string line;
			using (System.IO.StreamReader fileReader = new System.IO.StreamReader(fileName))
			{
				while ((line = fileReader.ReadLine()) != null)
				{
					var json = TestFlask.Models.Utils.CompressUtil.DecompressString(line);
					var scenario = JsonConvert.DeserializeObject<Scenario>(json);
					embeddedScenarios.Add(scenario);
				}
			}

			return embeddedScenarios;
		}

		private void ProvideTestFlaskHttpContext(Step step)
		{
			HttpContext.Current = new HttpContext(
				new HttpRequest("", "http://tempuri.org", ""),
				new HttpResponse(new StringWriter())
				);

			var invocation = step.GetRootInvocation();

			// In order to by pass Platform not supported exception
			// http://bigjimindc.blogspot.com.tr/2007/07/ms-kb928365-aspnet-requestheadersadd.html
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ProjectKey, invocation.ProjectKey);
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ScenarioNo, invocation.ScenarioNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.StepNo, invocation.StepNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.TestMode, <#= GetTestMode() #>);

            TestFlaskContext.LoadedStep = step;
		}

		private void AddHeaderToRequest(HttpRequest request, string key, string value)
		{
			NameValueCollection headers = request.Headers;

			Type t = headers.GetType();
			ArrayList item = new ArrayList();

			// Remove read-only limitation on headers
			t.InvokeMember("MakeReadWrite", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			t.InvokeMember("InvalidateCachedArrays", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			item.Add(value);
			t.InvokeMember("BaseAdd", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, new object[] { key, item });
			t.InvokeMember("MakeReadOnly", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
		}

		private Step GetLoadedStep(long stepNo)
		{
			Step step = embeddedScenarios?.SelectMany(sc => sc.Steps).SingleOrDefault(st => st.StepNo == stepNo);

			if (step == null)
			{
				TestFlaskApi api = new TestFlaskApi();
				step = api.LoadStep(stepNo);
			}

			return step;
		}

        private void HandleAssertion(Invocation rootInvocation, object responseObject, Exception exception, Action stepAssertion)
        {
            if ((!rootInvocation.IsFaulted && exception == null) || (rootInvocation.IsFaulted && exception != null))
            {
                stepAssertion();
            }
            else if (exception != null)
            {
                string exceptionStr = JToken.Parse(JsonConvert.SerializeObject(exception, jsonSerializerSettings)).ToString(Formatting.Indented);
                Assert.Fail($"Expected proper response of type {rootInvocation.ResponseType} but got exception =>{Environment.NewLine}{exceptionStr}{Environment.NewLine}{GetExceptionStackOutput()}");
            }
            else
            {
                string responseStr = JToken.Parse(JsonConvert.SerializeObject(responseObject, jsonSerializerSettings)).ToString(Formatting.Indented);
                Assert.Fail($"Expected exception of type {rootInvocation.ExceptionType} but got response =>{Environment.NewLine}{responseStr}");
            }
        }

        private string GetExceptionStackOutput()
        {
            StringBuilder strBuilder = new StringBuilder();
            IEnumerable<Invocation> exceptionalInvocations = TestFlaskContext.InvocationStack.ExceptionStack;

            strBuilder.AppendLine("**** TestFlask Exception Stack Snapshot ****");
            foreach (var excInv in exceptionalInvocations)
            {
                strBuilder.AppendLine("\t**** Faulty Invocation ****");
                strBuilder.AppendLine($"\t\tMethod => {excInv.InvocationSignature}");
                strBuilder.AppendLine($"\t\tInvocation Mode => {excInv.InvocationMode}");
                if (!string.IsNullOrWhiteSpace(excInv.RequestDisplayInfo))
                {
                    strBuilder.AppendLine($"\t\tRequest Info => {excInv.RequestDisplayInfo}");
                }
                strBuilder.AppendLine($"\t\tRequest => ");
                strBuilder.AppendLine(JToken.Parse(excInv.Request).ToString(Formatting.Indented));
                strBuilder.AppendLine($"\t\tExceptionType => {excInv.ExceptionType}");
                strBuilder.AppendLine($"\t\tException => ");
                strBuilder.AppendLine(JToken.Parse(excInv.Exception).ToString(Formatting.Indented));
            }

            return strBuilder.ToString();
        }

        private Invocation PrepareStep(long stepNo) 
        {
            Step loadedStep = GetLoadedStep(stepNo);
			var rootInvocation = loadedStep.GetRootInvocation();
			ProvideTestFlaskHttpContext(loadedStep);
			ProvideOperationContext(rootInvocation);
            return rootInvocation;
        }

		#endregion
		
<#
foreach (Scenario scenario in Scenarios) {
	Scenario deepScenario = LoadScenario(scenario.ScenarioNo);
#>
        #region <#= GetScenarioTestMethodName(deepScenario)#>

		[TestMethod]
		[TestCategory("TestFlask")]
		public void <#= GetScenarioTestMethodName(deepScenario)#>() {
<#
	foreach (Step step in deepScenario.Steps) {
#>
			<#= GetStepAssertMethodName(deepScenario, step)#>();
<#
	}
#>
		} 

<#
	foreach (Step step in deepScenario.Steps) {
		var rootInvocation = step.GetRootInvocation();
		signatureMatch = signatureRegex.Match(rootInvocation.InvocationSignature);
#>
		private void <#= GetStepAssertMethodName(deepScenario, step)#>() 
        {			
            var rootInvocation = PrepareStep(<#=step.StepNo #>);	
			var requestObject = JsonConvert.DeserializeObject<object[]>(rootInvocation.Request, jsonSerializerSettings).First() as <#=GetRequestTypeName()#>;

            //Set up additional behaviour for method args
            SetUp_<#= GetStepAssertMethodName(deepScenario, step)#>(requestObject);

			<#=GetResponseTypeName()#> responseObject = null;
			Exception exception = null;
			
			try { responseObject = subject<#= GetSubjectValue(step)#>.<#= GetRootMethodName() #>(requestObject); }
			catch (Exception ex) { exception = ex; }

			HandleAssertion(rootInvocation, responseObject, exception, 
                () => Assert_<#= GetStepAssertMethodName(deepScenario, step)#>(responseObject, exception));
		}

<#
	}
#>
        #endregion

<# 
} 

	foreach (var subject in Subjects) { #>
		private <#= subject.Key #> subject<#= subject.Value #>;	
<#
	}
#>
	}
}
