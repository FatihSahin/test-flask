<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TestFlask.Models.Entity" #>
/****************************************************************************
*																		 	*
*	This class is auto generated by TestFlask CLI on <#=DateTime.UtcNow.ToString()#>	*
*																		 	*
****************************************************************************/
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Newtonsoft.Json;
using TestFlask.Aspects.ApiClient;
using TestFlask.Aspects.Enums;
using TestFlask.Models.Context;
using TestFlask.Models.Entity;

namespace Payments.Order.ManagementWebService.Test
{
	public partial class TestFlaskTests
	{
		#region ConventionalAutos

		JsonSerializerSettings jsonSerializerSettings = new JsonSerializerSettings
		{
			TypeNameHandling = TypeNameHandling.All,
			TypeNameAssemblyFormatHandling = TypeNameAssemblyFormatHandling.Simple
		};

		private void ProvideTestFlaskHttpContext(Invocation invocation)
		{
			HttpContext.Current = new HttpContext(
				new HttpRequest("", "http://tempuri.org", ""),
				new HttpResponse(new StringWriter())
				);

			//In order to by pass Platform not supported exception
			//http://bigjimindc.blogspot.com.tr/2007/07/ms-kb928365-aspnet-requestheadersadd.html
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ProjectKey, invocation.ProjectKey);
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.ScenarioNo, invocation.ScenarioNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.StepNo, invocation.StepNo.ToString());
			AddHeaderToRequest(HttpContext.Current.Request, ContextKeys.TestMode, TestModes.Assert.ToString());
		}

		private void AddHeaderToRequest(HttpRequest request, string key, string value)
		{
			NameValueCollection headers = request.Headers;

			Type t = headers.GetType();
			ArrayList item = new ArrayList();

			// Remove read-only limitation on headers
			t.InvokeMember("MakeReadWrite", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			t.InvokeMember("InvalidateCachedArrays", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
			item.Add(value);
			t.InvokeMember("BaseAdd", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, new object[] { key, item });
			t.InvokeMember("MakeReadOnly", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, headers, null);
		}

		//will be fully prepared on template
		private Invocation GetRootInvocationFromApi(long stepNo)
		{
			TestFlaskApi api = new TestFlaskApi();
			Step step = api.LoadStep(stepNo);
			return step.Invocations.SingleOrDefault(inv => inv.Depth == 1);
		}

		private void HandleAssertion(Invocation rootInvocation, object responseObject, Exception exception, Action stepAssertion)
		{
			if ((!rootInvocation.IsFaulted && exception == null) || (rootInvocation.IsFaulted && exception != null))
			{
				stepAssertion();
			}
			else if (exception != null)
			{
				string exceptionStr = JsonConvert.SerializeObject(exception, jsonSerializerSettings);
				Assert.Fail($"Expected proper response of type {rootInvocation.ResponseType} but got exception =>{Environment.NewLine}{exceptionStr}");
			}
			else
			{
				string responseStr = JsonConvert.SerializeObject(responseObject, jsonSerializerSettings);
				Assert.Fail($"Expected exception of type {rootInvocation.ExceptionType} but got response =>{Environment.NewLine}{responseStr}");
			}
		}

		#endregion

		#region Scenarios
		
<#
foreach (Scenario scenario in Scenarios) {
	Scenario deepScenario = Api.GetScenarioDeep(scenario.ScenarioNo);
#>
		[TestMethod]
		[TestCategory("TestFlask")]
		private void Scenario<#=deepScenario.ScenarioNo.ToString() #>_<#= deepScenario.ScenarioName.Replace(" ", string.Empty) #>() {
<#
	foreach (Step step in deepScenario.Steps) {
#>
			Scenario<#=deepScenario.ScenarioNo.ToString() #>_<#=deepScenario.ScenarioName.Replace(" ", string.Empty)#>_Step<#=step.StepNo.ToString()#>_<#=step.StepName.Replace(" ", string.Empty)#>();
<#
	}
#>
		} 

		// Buraya step testler gelecek
<# 
} 

	foreach (var subject in Subjects) { #>
		<#= subject.Key #> subject<#= subject.Value #>;	
<#
	}
#>
		Payments.Order.ManagementWebService.Interfaces.IPaymentOrderManagementService subjectIPaymentOrderManagementService;

		[TestMethod]
		[TestCategory("TestFlask")]
		public void Scenario59_EmptyFee()
		{
			Scenario59_EmptyFee_Step187_createRemOrderWithEmptyFee();
		}

		private void Scenario59_EmptyFee_Step187_createRemOrderWithEmptyFee()
		{
			long stepNo = 187;
			Invocation rootInvocation = GetRootInvocationFromApi(stepNo);

			ProvideTestFlaskHttpContext(rootInvocation);
			ProvideOperationContext(rootInvocation);

			//Direct casting of first elemnt of object array to first method arg.. need to improve here to handle multi args with dynamic type matching
			var requestObject = JsonConvert.DeserializeObject<object[]>(rootInvocation.Request, jsonSerializerSettings).First()
				as Payments.Order.ManagementWebService.ServiceContracts.CreatePaymentOrderRequest;

			Payments.Order.ManagementWebService.ServiceContracts.CreatePaymentOrderResponse responseObject = null;
			Exception exception = null;

			try
			{
				responseObject = subjectIPaymentOrderManagementService.createPaymentOrder(requestObject);
			}
			catch (Exception ex)
			{
				exception = ex;
			}

			HandleAssertion(rootInvocation, responseObject, exception, () => AssertScenario59_Step187_createRemOrderWithEmptyFee(responseObject, exception));
		   
		}

		#endregion
	}
}
